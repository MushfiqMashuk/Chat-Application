<%- include('./partials/header.ejs'); %>
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
          <% if(conversation.creator.id == loggedInUser.userid) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>','<%= conversation.participant.name %>')">
              <% if (conversation.participant.avatar) { %>
                <img src="./uploads/avatars/<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>','<%= conversation.creator.name %>')">
              <% if (conversation.creator.avatar) { %>
              <img src="./uploads/avatars/<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name%>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>

        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg" alt="No Conversation"></div>
        <% } %>

      </div>

      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title">
        <span id="conversation-partner"></span>
        <img src="./images/trash.png" alt="Delete Conversation" id="delete-conversation"/>
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
      </form>

    </div>
    <%- include('./partials/add-conversation-modal.ejs'); %>

    <!-- import socket io client from cdn -->
    <script src="https://cdn.socket.io/3.1.3/socket.io.min.js" integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh" crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <script>
      const form = document.querySelector("#chat-form");
      const chatTitleContainer = document.querySelector("#conversation-partner");
      const messageContainer = document.querySelector("#chat-message-list");
      
      const loggedInUserId = '<%= loggedInUser.userid %>'
      const loggedInUserName = '<%= loggedInUser.username %>'

      let participant = null; // selected conversation participant object
      let current_conversation_id; // selected conversation id

      // socket initialization
      const socket = io('<%= process.env.APP_URL %>');
      
      // handle new/live incoming message from socket
      socket.on("new-message", data => {

        const {conversation_id, sender, message, attachments, date_time} = data.message;

      // only if current conversation is open in any client
        if(conversation_id === current_conversation_id){
          // select a class
          const messageClass = sender.id === loggedInUserId ? "you-message" : "other-message";
          const senderAvatar = sender.avatar ? `./uploads/avatars/${sender.avatar}` : `./images/nophoto.png`;
          const showAvatar = sender.id === loggedInUserId ? '' : `<img src="${senderAvatar}" alt="${sender.name}" />`;

          let attachmentElement = `<div class="attachments">`;

          if(attachments && attachments.length > 0){
            attachments.forEach(attachment => {
              attachmentElement += `<img src="./uploads/attachments/${attachment}" />`
            });
          }

          attachmentElement += `</div>`

          let messageHtml = `<div class="message-row ${messageClass}"> <div class="message-content">
            ${showAvatar}
            <div class="message-text">${message}</div>
            ${attachmentElement}
            <div class="message-time">${moment(date_time).fromNow()}</div>
            </div></div>`;

          // append the inoming message to message area as last item
          document.querySelector("#chat-message-list > .message-row:first-child").insertAdjacentHTML("beforeBegin", messageHtml);

        }

      });
      

      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name){

        const messageFailureToast = Toastify({
          text: "Error Loading Messages!",
          duration: 1000 
        });

        const response = await fetch(`/inbox/messages/${conversation_id}`);
        const result = await response.json(response);

        if(!result.errors && result.data){

          form.style.visibility = "visible";

          const {data, user, conversation_id} = result;
          participant = data.participant;
          current_conversation_id = conversation_id;

          if(data.messages){
            let allMessages = "";

            if(data.messages.length > 0){
              data.messages.forEach(message =>{

                const senderAvatar = message.sender.avatar ? `./uploads/avatars/${message.sender.avatar}` : `./images/nophoto.png`
                const messageClass = message.sender.id === loggedInUserId ? "you-message" : "other-message";
                const showAvatar = message.sender.id === loggedInUserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}"/>`;

                let attachments = `<div class="attachments">`

                if(message.attachments && message.attachments.length > 0){
                  message.attachments.forEach(attachment =>{
                    attachments += `<img src="./uploads/attachments/${attachment}"/>`
                  });
                }

                attachments += `</div>`;
              
                // final message html
                let messageHtml = `<div class="message-row ${messageClass}"><div class="message-content">
                ${showAvatar}
                <div class="message-text">${message.text}</div>
                ${attachments}
                <div class="message-time">${moment(message.date_time).fromNow()}</div>
                </div> </div>`;

                allMessages += messageHtml;
                messageContainer.innerHTML = allMessages;

              });
            } else if(data.messages.length === 0){
              messageContainer.innerHTML = `<div class="message-row"></div>`;
            }

            chatTitleContainer.textContent = current_conversation_name;
          }

        } else {
          messageFailureToast.showToast();
        }

      }
      
      // sending message
      form.onsubmit = async function(event){
        event.preventDefault();

        const sendMessageFailureToast = Toastify({
          text: "Error sending message",
          duration: 1000,
        });

        // prepare the form data
        const formData = new FormData(form);
      
        formData.append('receiverId', participant.id);
        formData.append('receiverName', participant.name);
        formData.append('avatar', participant.avatar || '');
        formData.append('conversationId', current_conversation_id);

        // send the request to the server
        const response = await fetch("inbox/message", {
          method: "POST",
          body: formData,
        });

        // get the response
        const result = await response.json();

        if (!result.errors) {
          form.reset(); // reset the form
        } else {
          sendMessageFailureToast.showToast();
        }

      }

    </script>
  </body>
</html>
